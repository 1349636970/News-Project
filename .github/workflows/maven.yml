# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Deploy Back Project to Microsoft Azure

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Person to greet'
        required: true
        default: 'Mona the Octocat'
      home:
        description: 'location'
        required: false
        default: 'The Octoverse'
  pull_request:
    branches: [ main ]
    types: [ closed ]
env:
  AWS_REGION: us-west-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: public.ecr.aws/p4y4q9s1           # set this to your Amazon ECR repository name
  ECS_CLUSTER: NewsProject                 # set this to your Amazon ECS cluster name

  CONTAINER_NAME: back


jobs:
  back:

    runs-on: ubuntu-latest

    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: Setup PostgreSQL
        # You may pin to the exact commit or the version.
        #        uses: Harmon758/postgresql-action@0be19fa37850b22cb4c9bbf28a03abbf44abd863
        uses: Harmon758/postgresql-action@v1.0.0
        with:
          # Version of PostgreSQL to use
          postgresql version: latest
          # POSTGRES_DB - name for the default database that is created
          postgresql db: ${{ secrets.POSTGRES_DB }}
          # POSTGRES_USER - create the specified user with superuser power
          postgresql user: ${{ secrets.DATASOURCEUSERNAME }}
          # POSTGRES_PASSWORD - superuser password
          postgresql password: ${{ secrets.DATASOURCEPASSWORD }}

      - name: Set up JDK 15
        uses: actions/setup-java@v2
        with:
          java-version: '15'
          distribution: 'adopt'

      - name: Build Application
        working-directory: back
        env:
          datasourceUser: ${{ secrets.DATASOURCEUSERNAME }}
          datasourceURL: ${{ secrets.DATASOURCEURL_TEST }}
          datasourcePassword: ${{ secrets.DATASOURCEPASSWORD }}
        run: mvn -B package --file pom.xml

      - name: Move the package to docker dir
        working-directory: back/docker
        run: cp ../target/news-project-0.0.1-SNAPSHOT.jar .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: back
        working-directory: back/docker
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg datasourceUser=${{ secrets.DATASOURCEUSERNAME }} --build-arg datasourceURL=${{ secrets.DATASOURCEURL }} --build-arg datasourcePassword=${{ secrets.DATASOURCEPASSWORD }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: a1349636970/news_project

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: back/docker
          push: true
          tags: a1349636970/news_project:back
          build-args: |
            datasourceUser=${{ secrets.DATASOURCEUSERNAME }}
            datasourceURL=${{ secrets.DATASOURCEURL }}
            datasourcePassword=${{ secrets.DATASOURCEPASSWORD }}


